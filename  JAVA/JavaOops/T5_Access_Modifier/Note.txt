What is access modifiers?
Sol:
Access modifiers in Java are keywords used to set the access level for classes, variables, methods, and constructors. 
They control the visibility and accessibility of the members of a class.


--->Types of Access Modifiers in Java<----

There are four types of access modifiers available in Java: 
>Default – No keyword required
>Private
>Protected
>Public

Default:
When no access modifier is specified for a class, method, or data member – It is said to be having the default access modifier 
by default. The data members, classes, or methods that are not declared using any access modifiers i.e. having default access 
modifiers are accessible only within the same package.

In this example, we will create two packages and the classes in the packages will be having the default access modifiers and 
we will try to access a class from one package from a class of the second package.
package p1; 

// Class Geek is having Default access modifier 
class Geek 
{ 
    void display() 
    { 
        System.out.println("Hello World!"); 
    } 
} 

package p2; 
import p1.*; 
// This class is having default access modifier 
class GeekNew 
{ 
    public static void main(String args[]) 
    { 
        // Accessing class Geek from package p1 
        Geek obj = new Geek(); 

        obj.display(); 
    } 
} 
output : Compile time error


Access-modifier	   Within Class	  Within Package	Outside package by subclass only	   Outside package

Private	           Yes 	               No	                      No                              	  No
Default	           Yes	              Yes	                      No	                              No
Protected	       Yes	              Yes	                      Yes	                              No
Public	           Yes	              Yes	                      Yes	                              Yes


public modifier:
The access level of a public modifier is everywhere. It can be accessed from within the class, outside the class, 
within the package and outside the package.
